@page "/categories/{categoryCode}/{discussionCode}"
@using System.Security.Claims
@using Zodpovedne.Contracts.Enums
@model DiscussionModel
@{
    ViewData["Title"] = Model.Discussion?.Title ?? "Diskuze";
}

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h1>
                <a href="/categories/@Model.CategoryCode" class="text-decoration-none">@Model.CategoryName</a>
            </h1>
            @if (Model.Discussion != null)
            {
                <div class="card">
                    <div class="card-header">
                        @* Nadpis diskuze - editovatelný pro oprávněné uživatele *@
                        @if (Model.CanEditDiscussion)
                        {
                            <div class="editable-title">
                                <h1 class="h3 mb-0" id="discussion-title-display">@Model.Discussion.Title</h1>
                                <input type="text" class="form-control d-none" id="discussion-title-edit" value="@Model.Discussion.Title" />
                            </div>
                        }
                        else
                        {
                            <h1 class="h3 mb-0">@Model.Discussion.Title</h1>
                        }

                        @* Metadata diskuze *@
                        <div class="text-muted small">
                            <span title="Autor">
                                <i class="bi bi-person"></i> @Model.Discussion.AuthorNickname
                            </span>
                            <span class="mx-2">•</span>
                            <span title="Datum vytvoření">
                                <i class="bi bi-calendar"></i> @Model.Discussion.CreatedAt.ToLocalTime().ToString("dd.MM.yyyy HH:mm")
                            </span>
                            <span class="mx-2">•</span>
                            <span title="Počet zobrazení">
                                <i class="bi bi-eye"></i> @Model.Discussion.ViewCount
                            </span>
                            @if (Model.Discussion.Type == DiscussionType.Top)
                            {
                                <span class="badge bg-primary ms-2">TOP</span>
                            }
                            @if (Model.Discussion.Type == DiscussionType.Hidden)
                            {
                                //<span class="badge bg-warning ms-2">Tvá diskuze je skrytá</span>
                            }
                        </div>
                    </div>

                    @* Obsah diskuze - editovatelný pro oprávněné uživatele *@
                    <div class="card-body">
                        @if (Model.CanEditDiscussion)
                        {
                            <div class="editable-content">
                                <div id="discussion-content-display">@Html.Raw(Model.Discussion.Content)</div>
                                <div id="toolbar-container" class="d-none"></div>
                                <div id="editor-container" class="d-none">@Html.Raw(Model.Discussion.Content)</div>
                            </div>
                        }
                        else
                        {
                            @Html.Raw(Model.Discussion.Content)
                        }
                    </div>

                    @* Panel s tlačítky pro like, editaci a změnu viditelnosti *@
                    <div class="card-footer d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center gap-2">
                            @* Tlačítko Like *@
                            @if (Model.CanLikeDiscussion)
                            {
                                <button class="btn @Model.GetLikeButtonClass(Model.Discussion.Likes.CanUserLike)"
                                        onclick="likeDiscussion(@Model.Discussion.Id)"
                                        @(!Model.Discussion.Likes.CanUserLike ? "disabled" : "")>
                                    <i class="bi bi-heart-fill"></i>
                                    <span id="discussion-likes-count">@Model.Discussion.Likes.LikeCount</span>
                                </button>
                            }
                            else
                            {
                                <span class="text-muted">
                                    <i class="bi bi-heart-fill"></i>
                                    @Model.Discussion.Likes.LikeCount
                                </span>
                            }

                            @* Tlačítko pro změnu viditelnosti (pouze pro adminy) *@
                            @if (Model.IsAdmin)
                            {
                                <button class="btn @(Model.Discussion.Type == DiscussionType.Hidden ? "btn-warning" : "btn-outline-warning")"
                                        onclick="toggleDiscussionVisibility(@Model.Discussion.Id)">
                                    <i class="bi bi-eye@(Model.Discussion.Type == DiscussionType.Hidden ? "" : "-slash")"></i>
                                    @(Model.Discussion.Type == DiscussionType.Hidden ? "Odkryj" : "Skryj")
                                </button>
                            }
                        </div>

                        @* Tlačítka pro editaci *@
                        @if (Model.CanEditDiscussion)
                        {
                            <div class="btn-group">
                                <button id="edit-discussion-btn" class="btn btn-primary" onclick="toggleDiscussionEdit(true)">
                                    <i class="bi bi-pencil"></i> Upravit
                                </button>
                                <button id="save-discussion-btn" class="btn btn-success d-none" onclick="saveDiscussionChanges()">
                                    <i class="bi bi-check"></i> Uložit
                                </button>
                                <button id="cancel-discussion-btn" class="btn btn-outline-secondary d-none" onclick="toggleDiscussionEdit(false)">
                                    <i class="bi bi-x"></i> Zrušit
                                </button>
                                <form method="post" asp-page-handler="DeleteDiscussion" class="d-inline">
                                    <button type="submit" class="btn btn-danger"
                                            onclick="return confirm('Opravdu chcete smazat tuto diskuzi včetně všech komentářů?')">
                                        <i class="bi bi-trash"></i> Smazat
                                    </button>
                                </form>
                            </div>
                        }
                    </div>
                </div>
                @* Sekce komentářů *@
                <div class="mt-5">
                    <h3>Komentáře</h3>

                    @* Formulář pro přidání nového komentáře *@
                    @if (Model.IsUserLoggedIn)
                    {
                        <div class="card mb-4">
                            <div class="card-body">
                                <h5>Přidat komentář</h5>
                                <form method="post" asp-page-handler="AddComment">
                                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                    <textarea asp-for="NewComment.Content" class="form-control" rows="3"
                                              placeholder="Napište komentář..." required></textarea>
                                    <button type="submit" class="btn btn-primary mt-2">Odeslat</button>
                                </form>
                            </div>
                        </div>
                    }

                    @* Seznam komentářů *@
                    @if (Model.Discussion.Comments.Any())
                    {
                        @* Zobrazení root komentářů *@
                        foreach (var comment in Model.Discussion.Comments.Where(c => Model.IsRootComment(c)).OrderByDescending(c => c.CreatedAt))
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <div class="text-muted small">
                                            <i class="bi bi-person"></i> @comment.AuthorNickname
                                            <span class="mx-2">•</span>
                                            @comment.CreatedAt.ToLocalTime().ToString("dd.MM.yyyy HH:mm")
                                            @if (comment.Type == CommentType.Hidden)
                                            {
                                                //<span class="badge bg-warning ms-2">Tvůj komentář je skrytý</span>
                                            }
                                        </div>
                                        <div class="d-flex align-items-center gap-2">
                                            @* Like tlačítko pro komentář *@
                                            @if (Model.CanLikeComment(comment))
                                            {
                                                <button class="btn btn-sm @Model.GetLikeButtonClass(comment.Likes.CanUserLike)"
                                                        onclick="likeComment(@Model.Discussion.Id, @comment.Id)"
                                                        @(!comment.Likes.CanUserLike ? "disabled" : "")>
                                                    <i class="bi bi-heart-fill"></i>
                                                    <span id="comment-@comment.Id-likes-count">@comment.Likes.LikeCount</span>
                                                </button>
                                            }
                                            else
                                            {
                                                <span class="text-muted">
                                                    <i class="bi bi-heart-fill"></i>
                                                    @comment.Likes.LikeCount
                                                </span>
                                            }

                                            @* Tlačítko pro změnu viditelnosti komentáře (pouze pro adminy) *@
                                            @if (Model.IsAdmin)
                                            {
                                                <button class="btn btn-sm @(comment.Type == CommentType.Hidden ? "btn-warning" : "btn-outline-warning")"
                                                        onclick="toggleCommentVisibility(@Model.Discussion.Id, @comment.Id)">
                                                    <i class="bi bi-eye@(comment.Type == CommentType.Hidden ? "" : "-slash")"></i>
                                                    @(comment.Type == CommentType.Hidden ? "Odkryj" : "Skryj")
                                                </button>
                                            }
                                        </div>
                                    </div>
                                    <p class="mb-0">@comment.Content</p>

                                    @* Formulář pro odpověď na komentář (zpočátku skrytý) *@
                                    @if (Model.IsUserLoggedIn)
                                    {
                                        <div id="@Model.GetReplyFormId(comment.Id)" style="display: none;" class="mt-3">
                                            <form method="post" asp-page-handler="AddComment">
                                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                                <input type="hidden" asp-for="ReplyToCommentId" value="@comment.Id" />
                                                <textarea asp-for="NewComment.Content" class="form-control" rows="2"
                                                          placeholder="Napište odpověď..." required></textarea>
                                                <div class="mt-2">
                                                    <button type="submit" class="btn btn-primary btn-sm">Odeslat</button>
                                                    <button type="button" class="btn btn-outline-secondary btn-sm"
                                                            onclick="hideReplyForm(@comment.Id)">
                                                        Zrušit
                                                    </button>
                                                </div>
                                            </form>
                                        </div>
                                    }

                                    @* Odpovědi na komentář *@
                                    @foreach (var reply in comment.Replies.OrderBy(r => r.CreatedAt))
                                    {
                                        <div class="card-body border-top ms-4 mt-3">
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <div class="text-muted small">
                                                    <i class="bi bi-person"></i> @reply.AuthorNickname
                                                    <span class="mx-2">•</span>
                                                    @reply.CreatedAt.ToLocalTime().ToLocalTime().ToString("dd.MM.yyyy HH:mm")
                                                    @if (reply.Type == CommentType.Hidden)
                                                    {
                                                        //<span class="badge bg-warning ms-2">Tvůj komentář je skrytý</span>
                                                    }
                                                </div>
                                                <div class="d-flex align-items-center gap-2">
                                                    @if (Model.CanLikeComment(reply))
                                                    {
                                                        <button class="btn btn-sm @Model.GetLikeButtonClass(reply.Likes.CanUserLike)"
                                                                onclick="likeComment(@Model.Discussion.Id, @reply.Id)"
                                                                @(!reply.Likes.CanUserLike ? "disabled" : "")>
                                                            <i class="bi bi-heart-fill"></i>
                                                            <span id="comment-@reply.Id-likes-count">@reply.Likes.LikeCount</span>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">
                                                            <i class="bi bi-heart-fill"></i>
                                                            @reply.Likes.LikeCount
                                                        </span>
                                                    }

                                                    @* Tlačítko pro změnu viditelnosti odpovědi (pouze pro adminy) *@
                                                    @if (Model.IsAdmin)
                                                    {
                                                        <button class="btn btn-sm @(reply.Type == CommentType.Hidden ? "btn-warning" : "btn-outline-warning")"
                                                                onclick="toggleCommentVisibility(@Model.Discussion.Id, @reply.Id)">
                                                            <i class="bi bi-eye@(reply.Type == CommentType.Hidden ? "" : "-slash")"></i>
                                                            @(reply.Type == CommentType.Hidden ? "Odkryj" : "Skryj")
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                            <p class="mb-0">@reply.Content</p>
                                        </div>
                                    }

                                    @* Tlačítko pro zobrazení formuláře odpovědi *@
                                    @if (Model.IsUserLoggedIn)
                                    {
                                        <div class="mt-3">
                                            <button class="btn btn-sm btn-outline-primary" onclick="showReplyForm(@comment.Id)">
                                                <i class="bi bi-reply"></i> Odpovědět
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p>Zatím žádné komentáře.</p>
                    }
                </div>
            }
        </div>
    </div>
</div>

@* Skrytý input pro API URL *@
<input type="hidden" id="apiBaseUrl" value="@Model.ApiBaseUrl" />

@section Scripts {
    <!-- Import CKEditoru -->
    <script src="https://cdn.ckeditor.com/ckeditor5/40.0.0/decoupled-document/ckeditor.js"></script>
    @if (Model.IsUserLoggedIn)
    {
        <script>
            sessionStorage.setItem('JWTToken', '@Model.JwtToken');
        </script>
    }

    <script>
        // Funkce pro přidání like k diskuzi
        async function likeDiscussion(discussionId) {
            try {
                const apiBaseUrl = document.getElementById('apiBaseUrl').value;
                const response = await fetch(`${apiBaseUrl}/api/discussions/${discussionId}/like`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${sessionStorage.getItem('JWTToken')}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    document.getElementById('discussion-likes-count').textContent = result.likeCount;
                    if (!result.canUserLike) {
                        const button = document.querySelector(`button[onclick="likeDiscussion(${discussionId})"]`);
                        button.disabled = true;
                        button.classList.replace('btn-outline-primary', 'btn-outline-secondary');
                    }
                } else {
                    alert('Nepodařilo se přidat like.');
                }
            } catch (error) {
                console.error('Chyba při přidávání like:', error);
                alert('Došlo k chybě při přidávání like.');
            }
        }

        // Funkce pro přidání like ke komentáři
        async function likeComment(discussionId, commentId) {
            try {
                const apiBaseUrl = document.getElementById('apiBaseUrl').value;
                const response = await fetch(`${apiBaseUrl}/api/discussions/${discussionId}/comments/${commentId}/like`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${sessionStorage.getItem('JWTToken')}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    document.getElementById(`comment-${commentId}-likes-count`).textContent = result.likeCount;
                    if (!result.canUserLike) {
                        const button = document.querySelector(`button[onclick="likeComment(${discussionId}, ${commentId})"]`);
                        button.disabled = true;
                        button.classList.replace('btn-outline-primary', 'btn-outline-secondary');
                    }
                } else {
                    alert('Nepodařilo se přidat like.');
                }
            } catch (error) {
                console.error('Chyba při přidávání like:', error);
                alert('Došlo k chybě při přidávání like.');
            }
        }

        // Funkce pro správu formuláře odpovědí
        function showReplyForm(commentId) {
            document.querySelectorAll('[id^="reply-form-"]').forEach(form => {
                form.style.display = 'none';
            });

            const form = document.getElementById(`reply-form-${commentId}`);
            if (form) {
                form.style.display = 'block';
                form.querySelector('textarea').focus();
            }
        }

        function hideReplyForm(commentId) {
            const form = document.getElementById(`reply-form-${commentId}`);
            if (form) {
                form.style.display = 'none';
                form.querySelector('textarea').value = '';
            }
        }

        // Funkce pro editaci diskuze
        function toggleDiscussionEdit(show) {
                    const titleDisplay = document.getElementById('discussion-title-display');
            const titleEdit = document.getElementById('discussion-title-edit');
            const contentDisplay = document.getElementById('discussion-content-display');
            const toolbarContainer = document.getElementById('toolbar-container');
            const editorContainer = document.getElementById('editor-container');
            const editBtn = document.getElementById('edit-discussion-btn');
            const saveBtn = document.getElementById('save-discussion-btn');
            const cancelBtn = document.getElementById('cancel-discussion-btn');

            if (show) {
                titleDisplay.classList.add('d-none');
                titleEdit.classList.remove('d-none');
                contentDisplay.classList.add('d-none');
                toolbarContainer.classList.remove('d-none');
                editorContainer.classList.remove('d-none');
                editBtn.classList.add('d-none');
                saveBtn.classList.remove('d-none');
                cancelBtn.classList.remove('d-none');

                // Inicializace editoru při prvním zobrazení
                if (!window.discussionEditor) {
                    DecoupledEditor
                        .create(document.querySelector('#editor-container'), {
                            toolbar: ['bold', '|', 'bulletedList', 'numberedList'],
                            language: 'cs'
                        })
                        .then(editor => {
                            window.discussionEditor = editor;
                            const toolbarContainer = document.querySelector('#toolbar-container');
                            toolbarContainer.appendChild(editor.ui.view.toolbar.element);
                        });
                }
            } else {
                titleDisplay.classList.remove('d-none');
                titleEdit.classList.add('d-none');
                contentDisplay.classList.remove('d-none');
                toolbarContainer.classList.add('d-none');
                editorContainer.classList.add('d-none');
                editBtn.classList.remove('d-none');
                saveBtn.classList.add('d-none');
                cancelBtn.classList.add('d-none');
            }
        }

        // Funkce pro uložení změn v diskuzi
        async function saveDiscussionChanges() {
                    const titleEdit = document.getElementById('discussion-title-edit');
            const contentDisplay = document.getElementById('discussion-content-display');
            const apiBaseUrl = document.getElementById('apiBaseUrl').value;

            try {
                const content = window.discussionEditor ? window.discussionEditor.getData() : '';
                const response = await fetch(`${apiBaseUrl}/api/discussions/@Model.Discussion.Id`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${sessionStorage.getItem('JWTToken')}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        title: titleEdit.value,
                        content: content,
                        type: @((int)Model.Discussion.Type)
                    })
                });

                if (response.ok) {
                    contentDisplay.innerHTML = content;
                    toggleDiscussionEdit(false);
                } else {
                    alert('Nepodařilo se uložit změny.');
                }
            } catch (error) {
                console.error('Chyba při ukládání:', error);
                alert('Došlo k chybě při ukládání změn.');
            }
        }

        // Funkce pro změnu viditelnosti diskuze
        async function toggleDiscussionVisibility(discussionId) {
            try {
                const apiBaseUrl = document.getElementById('apiBaseUrl').value;
                const response = await fetch(`${apiBaseUrl}/api/discussions/${discussionId}/toggle-visibility`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${sessionStorage.getItem('JWTToken')}`
                    }
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Nepodařilo se změnit viditelnost diskuze.');
                }
            } catch (error) {
                console.error('Chyba při změně viditelnosti:', error);
                alert('Došlo k chybě při změně viditelnosti diskuze.');
            }
        }

        // Funkce pro změnu viditelnosti komentáře
        async function toggleCommentVisibility(discussionId, commentId) {
            try {
                const apiBaseUrl = document.getElementById('apiBaseUrl').value;
                const response = await fetch(`${apiBaseUrl}/api/discussions/${discussionId}/comments/${commentId}/toggle-visibility`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${sessionStorage.getItem('JWTToken')}`
                    }
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Nepodařilo se změnit viditelnost komentáře.');
                }
            } catch (error) {
                console.error('Chyba při změně viditelnosti:', error);
                alert('Došlo k chybě při změně viditelnosti komentáře.');
            }
        }
    </script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
}