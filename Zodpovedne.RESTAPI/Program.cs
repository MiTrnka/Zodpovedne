// NuGet Microsoft.AspNetCore.Authentication.JwtBearer
// NuGet Swashbuckle.AspNetCore
// NuGet HtmlSanitizer   //pro bezpeËnÈ ËiötÏnÌ HTML vstupu

using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using System.Security.Claims;
using Microsoft.OpenApi.Models;
using Zodpovedne.Logging;
using Zodpovedne.RESTAPI.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Zodpovedne.Data.Data;
using Zodpovedne.Data.Interfaces;
using Zodpovedne.Data.Models;
using Zodpovedne.Data.Services;

namespace Zodpovedne.RESTAPI
{
    public class Program
    {
        public static async Task Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // PodmÌneËn· konfigurace podle prost¯edÌ
            if (builder.Environment.IsDevelopment())
            {
                // V˝vojovÈ prost¯edÌ
                builder.WebHost.ConfigureKestrel(options =>
                {
                    options.ListenAnyIP(5555); // Lok·lnÌ v˝vojov˝ port pro API
                });
            }
            else
            {
                // ProdukËnÌ prost¯edÌ - nastavenÌ pro Nginx
                builder.WebHost.ConfigureKestrel(options =>
                {
                    options.ListenAnyIP(5001); // Port, na kterÈm bude API poslouchat
                });
            }

            // Kontrola existence konfiguraËnÌho souboru a jeho poloûek
            if (builder.Configuration == null)
            {
                Console.WriteLine("Program skonËil, protoûe nebyl nalezen konfiguraËnÌ soubor.");
                return;
            }
            IConfiguration configuration = builder.Configuration;

            if (configuration["Jwt:Issuer"] == null)
            {
                Console.WriteLine("JWT Issuer nenÌ vyplnÏn v konfiguraËnÌm souboru");
                return;
            }
            if (configuration["Jwt:Audience"] == null)
            {
                Console.WriteLine("JWT Audience nenÌ vyplnÏn v konfiguraËnÌm souboru");
                return;
            }
            if (configuration["Jwt:Key"] == null)
            {
                Console.WriteLine("JWT Key nenÌ vyplnÏn v konfiguraËnÌm souboru");
                return;
            }
            if (configuration["Jwt:ExpirationInHours"] == null)
            {
                Console.WriteLine("JWT ExpirationInHours nenÌ vyplnÏn v konfiguraËnÌm souboru");
                return;
            }

            // Registrace sluûeb pro response caching, nastavenÌ se t˝k· celÈ aplikace pro vöechny endpointy oznaËenÈ atributem [ResponseCache]
            builder.Services.AddResponseCaching(options =>
            {
                // Maxim·lnÌ velikost jednÈ poloûky v cache je 10 MB. Pokud by nÏjak· HTTP odpovÏÔ mÏla vÏtöÌ velikost, nebude cachov·na.
                options.MaximumBodySize = 10 * 1024 * 1024;
                // celkov· maxim·lnÌ velikost vöech poloûek v cache je 100 MB. Kdyû tento limit bude p¯ekroËen, nejstaröÌ nebo nejmÈnÏ pouûÌvanÈ poloûky budou odstranÏny z cache.
                options.SizeLimit = 100 * 1024 * 1024;
            });

            // Registrace sluûeb z projektu Data
            //builder.Services.AddIdentityInfrastructure(builder.Configuration);


            // Konfigurace/registrace datovÈ vrstvy (DBContext, Identity)
            string? connectionString = configuration.GetConnectionString("DefaultConnection");

            // Pokud se ani jeden zp˘sob nepoda¯il, vyhodÌme v˝jimku
            if (string.IsNullOrEmpty(connectionString))
                throw new InvalidOperationException("Connection string 'DefaultConnection' nenÌ nastaven v konfiguraci Data projektu.");


            // Registrace DbContextu
            builder.Services.AddDbContext<ApplicationDbContext>(options =>
                options.UseNpgsql(connectionString));

            // Registrace IDataContext
            // Kdyû nÏkdo poû·d· o IDataContext, dostane instanci ApplicationDbContext
            builder.Services.AddScoped<IDataContext>(sp =>
                sp.GetRequiredService<ApplicationDbContext>());

            // Registrace sluûeb pro Identity
            builder.Services.AddIdentity<ApplicationUser, IdentityRole>(options => {
                // P˘vodnÌ konfigurace z ServiceCollectionExtensions
                options.Password.RequireDigit = false;
                options.Password.RequireLowercase = false;
                options.Password.RequireUppercase = false;
                options.Password.RequireNonAlphanumeric = false;
                options.Password.RequiredLength = 1;
                options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);
                options.Lockout.MaxFailedAccessAttempts = 5;
            })
            .AddEntityFrameworkStores<ApplicationDbContext>()
            .AddDefaultTokenProviders();

            // Registrace dalöÌch sluûeb
            builder.Services.AddScoped<IIdentityDataSeeder, IdentityDataSeeder>();
            builder.Services.AddScoped<ITestDataSeeder, TestDataSeeder>();



            // Konfigurace JWT autentizace
            builder.Services.AddAuthentication(options => {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
            .AddJwtBearer(options => {
                options.SaveToken = true;
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ValidateIssuerSigningKey = true,
                    ValidIssuer = builder.Configuration["Jwt:Issuer"],
                    ValidAudience = builder.Configuration["Jwt:Audience"],
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["Jwt:Key"] ?? throw new ArgumentNullException("JWT Key nenÌ vyplnÏn v konfiguraËnÌm souboru"))),
                    NameClaimType = ClaimTypes.Email,
                    RoleClaimType = ClaimTypes.Role
                };
            });

            builder.Services.AddAuthorization(options => {
                // Definice politik - v produkci rozöÌ¯it podle pot¯eb
                options.AddPolicy("RequireAdminRole", policy =>
                    policy.RequireRole("Admin"));
                options.AddPolicy("RequireMemberRole", policy =>
                    policy.RequireRole("Member"));
            });


            // P¯id·nÌ CORS do kontejneru sluûeb
            builder.Services.AddCors(options =>
            {
                options.AddPolicy("AllowSpecificOrigins",
                    policy =>
                    {
                        policy.WithOrigins(
                                "http://localhost:5214"
                            )
                            .AllowAnyMethod()
                            .AllowAnyHeader()
                            .AllowCredentials();
                    });
            });

            // Registrace sluûby pro odesÌl·nÌ e-mail˘
            builder.Services.AddScoped<IEmailService, EmailService>();

            builder.Services.AddControllers();
            builder.Services.AddEndpointsApiExplorer();

            // Registrace Swaggeru, v produkci zakomentovat, v z·vorce je nepovinn· Ë·st, kter· konfiguruje pouze to, abych mohl vloûit token v Swaggeru do hlaviËky Authorization
            builder.Services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "Zodpovedne API", Version = "v1" });

                c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    Description = "JWT Authorization header. Just enter the token",
                    Name = "Authorization",
                    In = ParameterLocation.Header,
                    Type = SecuritySchemeType.Http,  // ZmÏna zde
                    Scheme = "bearer",  // a zde
                    BearerFormat = "JWT"
                });

                c.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "Bearer"
                            }
                        },
                        Array.Empty<string>()
                    }
                });
            });

            // P¯id·me t¯Ìdu pro logov·nÌ
            builder.Services.AddSingleton<FileLogger>();

            // Pak p¯id·me konfiguraci pro ASP.NET Core logging za pouûitÌ naöeho FileLoggeru
            builder.Services.AddLogging(logging =>
            {
                logging.ClearProviders(); // OdstranÌ v˝chozÌ loggery
                logging.AddConsole(); // Ponech· logov·nÌ do konzole

                // P¯id· n·ö vlastnÌ logger pro kritickÈ chyby
                logging.AddProvider(new CustomFileLoggerProvider(
                    logging.Services.BuildServiceProvider().GetRequiredService<FileLogger>()
                ));
            });

            // P¯id·nÌ pamÏùovÈ cache nap¯Ìklad pro cachov·nÌ dat z datab·ze (seznam diskuzÌ, kde nÏkdo reagoval na m˘j koment·¯)
            builder.Services.AddMemoryCache();

            var app = builder.Build();

            // seznam rout, pro kterÈ se ihned vr·tÌ 404 a nepokraËuje se v pipeline
            app.MapShortCircuit(404, "wp-admin", "wp-login");

            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }
            else
            {
                app.UseHttpsRedirection();
            }

            // P¯id·nÌ middleware pro response caching
            app.UseResponseCaching();
            // Middleware pro nastavenÌ cache headers
            app.Use(async (context, next) =>
            {
                // V˝chozÌ cache control hodnoty
                context.Response.GetTypedHeaders().CacheControl =
                    new Microsoft.Net.Http.Headers.CacheControlHeaderValue()
                    {
                        // P¯id· do http hlaviËky Cache-Control: public, max-age=2
                        // I klientskÈ prohlÌûeËe, ve¯ejnÈ proxyservery a cdn mohou cachovat odpovÏÔ
                        Public = true,

                        // defaultnÌ doba ûivota v takovÈto keöÌ (prohlÌûe, cdn...) cache je 1 sekunda, dobu pak nastavÌm u konkrÈtnÌch endpoint˘
                        // nap¯: [ResponseCache(Duration = 360)], kterÈ nastavÌ Ëas uchov·nÌ jak na klientovi, tak na serveru
                        MaxAge = TimeSpan.FromSeconds(1)
                    };

                await next();
            });

            app.UseCors("AllowSpecificOrigins");
            app.UseAuthentication();
            app.UseAuthorization();
            app.MapControllers();


            // Inicializace v˝chozÌch rolÌ a admin ˙Ëtu p¯i startu aplikace
            /*using (var scope = app.Services.CreateScope())
            {
                var identityDataSeeder = scope.ServiceProvider.GetRequiredService<IIdentityDataSeeder>();
                await identityDataSeeder.InitializeRolesAndAdminAsync();
            }*/

            //Po inicializaci rolÌ a admin ˙Ëtu
            /*using (var scope = app.Services.CreateScope())
            {
                var testDataSeeder = scope.ServiceProvider.GetRequiredService<ITestDataSeeder>();
                await testDataSeeder.SeedTestDataAsync();
            }*/

            app.Run();
        }
    }
}
